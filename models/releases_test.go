// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testReleases(t *testing.T) {
	t.Parallel()

	query := Releases()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testReleasesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Release{}
	if err = randomize.Struct(seed, o, releaseDBTypes, true, releaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Release struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Releases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReleasesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Release{}
	if err = randomize.Struct(seed, o, releaseDBTypes, true, releaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Release struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Releases().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Releases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReleasesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Release{}
	if err = randomize.Struct(seed, o, releaseDBTypes, true, releaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Release struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ReleaseSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Releases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testReleasesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Release{}
	if err = randomize.Struct(seed, o, releaseDBTypes, true, releaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Release struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ReleaseExists(ctx, tx, o.RowID)
	if err != nil {
		t.Errorf("Unable to check if Release exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ReleaseExists to return true, but got false.")
	}
}

func testReleasesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Release{}
	if err = randomize.Struct(seed, o, releaseDBTypes, true, releaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Release struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	releaseFound, err := FindRelease(ctx, tx, o.RowID)
	if err != nil {
		t.Error(err)
	}

	if releaseFound == nil {
		t.Error("want a record, got nil")
	}
}

func testReleasesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Release{}
	if err = randomize.Struct(seed, o, releaseDBTypes, true, releaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Release struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Releases().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testReleasesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Release{}
	if err = randomize.Struct(seed, o, releaseDBTypes, true, releaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Release struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Releases().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testReleasesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	releaseOne := &Release{}
	releaseTwo := &Release{}
	if err = randomize.Struct(seed, releaseOne, releaseDBTypes, false, releaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Release struct: %s", err)
	}
	if err = randomize.Struct(seed, releaseTwo, releaseDBTypes, false, releaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Release struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = releaseOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = releaseTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Releases().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testReleasesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	releaseOne := &Release{}
	releaseTwo := &Release{}
	if err = randomize.Struct(seed, releaseOne, releaseDBTypes, false, releaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Release struct: %s", err)
	}
	if err = randomize.Struct(seed, releaseTwo, releaseDBTypes, false, releaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Release struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = releaseOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = releaseTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Releases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func releaseBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Release) error {
	*o = Release{}
	return nil
}

func releaseAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Release) error {
	*o = Release{}
	return nil
}

func releaseAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Release) error {
	*o = Release{}
	return nil
}

func releaseBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Release) error {
	*o = Release{}
	return nil
}

func releaseAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Release) error {
	*o = Release{}
	return nil
}

func releaseBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Release) error {
	*o = Release{}
	return nil
}

func releaseAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Release) error {
	*o = Release{}
	return nil
}

func releaseBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Release) error {
	*o = Release{}
	return nil
}

func releaseAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Release) error {
	*o = Release{}
	return nil
}

func testReleasesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Release{}
	o := &Release{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, releaseDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Release object: %s", err)
	}

	AddReleaseHook(boil.BeforeInsertHook, releaseBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	releaseBeforeInsertHooks = []ReleaseHook{}

	AddReleaseHook(boil.AfterInsertHook, releaseAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	releaseAfterInsertHooks = []ReleaseHook{}

	AddReleaseHook(boil.AfterSelectHook, releaseAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	releaseAfterSelectHooks = []ReleaseHook{}

	AddReleaseHook(boil.BeforeUpdateHook, releaseBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	releaseBeforeUpdateHooks = []ReleaseHook{}

	AddReleaseHook(boil.AfterUpdateHook, releaseAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	releaseAfterUpdateHooks = []ReleaseHook{}

	AddReleaseHook(boil.BeforeDeleteHook, releaseBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	releaseBeforeDeleteHooks = []ReleaseHook{}

	AddReleaseHook(boil.AfterDeleteHook, releaseAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	releaseAfterDeleteHooks = []ReleaseHook{}

	AddReleaseHook(boil.BeforeUpsertHook, releaseBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	releaseBeforeUpsertHooks = []ReleaseHook{}

	AddReleaseHook(boil.AfterUpsertHook, releaseAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	releaseAfterUpsertHooks = []ReleaseHook{}
}

func testReleasesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Release{}
	if err = randomize.Struct(seed, o, releaseDBTypes, true, releaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Release struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Releases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testReleasesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Release{}
	if err = randomize.Struct(seed, o, releaseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Release struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(releaseColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Releases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testReleasesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Release{}
	if err = randomize.Struct(seed, o, releaseDBTypes, true, releaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Release struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testReleasesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Release{}
	if err = randomize.Struct(seed, o, releaseDBTypes, true, releaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Release struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ReleaseSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testReleasesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Release{}
	if err = randomize.Struct(seed, o, releaseDBTypes, true, releaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Release struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Releases().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	releaseDBTypes = map[string]string{`RowID`: `integer`, `Name`: `text`, `Namespace`: `text`, `Cluster`: `text`, `Status`: `text`, `CreatedAt`: `date`, `Revision`: `integer`, `Schemaversion`: `integer`}
	_              = bytes.MinRead
)

func testReleasesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(releasePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(releaseAllColumns) == len(releasePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Release{}
	if err = randomize.Struct(seed, o, releaseDBTypes, true, releaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Release struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Releases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, releaseDBTypes, true, releasePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Release struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testReleasesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(releaseAllColumns) == len(releasePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Release{}
	if err = randomize.Struct(seed, o, releaseDBTypes, true, releaseColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Release struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Releases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, releaseDBTypes, true, releasePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Release struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(releaseAllColumns, releasePrimaryKeyColumns) {
		fields = releaseAllColumns
	} else {
		fields = strmangle.SetComplement(
			releaseAllColumns,
			releasePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ReleaseSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testReleasesUpsert(t *testing.T) {
	t.Parallel()

	if len(releaseAllColumns) == len(releasePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Release{}
	if err = randomize.Struct(seed, &o, releaseDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Release struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Release: %s", err)
	}

	count, err := Releases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, releaseDBTypes, false, releasePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Release struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Release: %s", err)
	}

	count, err = Releases().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
